[
  {
    "objectID": "dark_mode.html#demo",
    "href": "dark_mode.html#demo",
    "title": "quarto_demo",
    "section": "Demo",
    "text": "Demo\nToggle dark and light mode (there’s a switch in the upper right corner) to see the plot switch. Inspired by Marc-Aurèle Rivière."
  },
  {
    "objectID": "dark_mode.html#setup",
    "href": "dark_mode.html#setup",
    "title": "quarto_demo",
    "section": "Setup",
    "text": "Setup\nEdit the _quarto.yml file to add your light and dark themes, plus .scss files for each. The quarto documentation on HTML Theming is a useful reference.\n_quarto.yml:\nformat:\n  html:\n    theme:\n      light: [flatly, light.scss]\n      dark: [darkly, dark.scss]\nCreate .scss files for light and dark mode. Set blocks with the class .light-mode to hide in dark mode, and blocks with the class .dark-mode to hide in light mode. You can also add other rules here to change SASS Variables for the themes. For example, I think the inline code colour is too dark in the darkly theme, and I hate the green links.\nlight.scss:\n/*-- scss:defaults --*/\n$link-color: #248CFC;\n\n/*-- scss:rules --*/\n.light-mode { display: block; }\n.dark-mode { display: none; }\ndark.scss:\n/*-- scss:defaults --*/\n$link-color: #248CFC;\n$code-color: #bb8acf;\n\n/*-- scss:rules --*/\n.dark-mode { display: block; }\n.light-mode { display: none; }"
  },
  {
    "objectID": "dark_mode.html#switching",
    "href": "dark_mode.html#switching",
    "title": "quarto_demo",
    "section": "Switching",
    "text": "Switching\nNow you can make your plots as normal.\n\ng <- ggplot(diamonds, aes(x = cut, y = price, fill = cut)) +\n  geom_violin() +\n  labs(title = \"Diamond price by cut\")\n\nAdd #| classes: light-mode or #| classes: dark-mode to the code chunks to display their output conditionally.\n\ng + labs(subtitle = \"Light Mode\") + \n  theme_solarized(light = TRUE)\n\n\n\n\n\ng + labs(subtitle = \"Dark Mode\") + \n  theme_solarized(light = FALSE)\n\n\n\n\nThis also works for any content. Just put it inside of a div with the appropriate class.\n::: {.light-mode}\nText that only shows in light mode\n:::\n\n::: {.dark-mode}\nText that only shows in dark mode\n:::\n\nText that only shows in light mode\n\n\nText that only shows in dark mode"
  },
  {
    "objectID": "dark_mode.html#auto-theme",
    "href": "dark_mode.html#auto-theme",
    "title": "quarto_demo",
    "section": "Auto-theme",
    "text": "Auto-theme\nIf you add the following code at the top of your script, it will automatically theme plots for you without the code above (you still need the setup). I’m using ggthemes::theme_solarized() in light and dark versions, but you can add any theme you like or a custom theme.\nThanks to Marc-Aurèle Rivière for pointing out that the original version using ggplot2:::print.ggplot() didn’t handle patchwork output right, but print() does.\n\nlibrary(knitr)\nknit_print.ggplot <- function (x, options, ...) {\n  dark_theme = ggthemes::theme_solarized(light = FALSE)\n  light_theme = ggthemes::theme_solarized(light = TRUE)\n\n  orig_theme <- ggplot2::theme_get()\n  on.exit(ggplot2::theme_set(orig_theme))\n\n  # get html for light and dark\n  knitr::asis_output('\\n<div class=\"dark-mode\">\\n')\n  \n  ggplot2::theme_set(dark_theme)\n  print(x)\n  \n  knitr::asis_output('</div>\\n<div class=\"light-mode\">\\n')\n  \n  ggplot2::theme_set(light_theme)\n  print(x)\n  \n  knitr::asis_output('</div>\\n\\n')\n}\nregisterS3method(\"knit_print\", \"ggplot\", knit_print.ggplot)\n\n\ng"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto demo",
    "section": "",
    "text": "This website contains my explorations of Quarto.\n\nReplicating df_print\nDark mode conditional chunks\nquartoExtra package"
  },
  {
    "objectID": "quartoExtra.html#setup",
    "href": "quartoExtra.html#setup",
    "title": "quartoExtra",
    "section": "Setup",
    "text": "Setup\nThe dark mode toggle only works for projects with a _quarto.yml file (e.g., books and websites) set up in the right way, with dark and light .scss files. darkmode_setup() is a convenience function that adds the dark and light .scss files (or updates existing ones) and creates/updates the _quarto.yml file to use the light and dark and themes you specify (defaults to flatly and darkly).\n\ndarkmode_setup(light_theme = \"cosmo\",\n               dark_theme = \"slate\")\n\nTurn on dark mode toggling on any page by setting:\n\noptions(quartoExtra.darkmode = TRUE)"
  },
  {
    "objectID": "quartoExtra.html#plots",
    "href": "quartoExtra.html#plots",
    "title": "quartoExtra",
    "section": "Plots",
    "text": "Plots\n\ng <- ggplot(diamonds, aes(x = cut, y = price, fill = cut)) +\n  geom_violin()\n\nPlots will toggle light and dark mode. You need to set results='asis' in the code chunk (for now; I’m trying to figure out how to avoid that).\ng + labs(title = \"Toggles between light and dark mode\")\n\n\n\n\n\n\n\n\n\n\nIt also works for patchwork plots.\np <- g + g + plot_layout(nrow = 1, guides = \"collect\")\n\np\n\n\n\n\n\n\n\n\n\n\nIf you add #| classes: light-mode to the chunk, this chunk output will only show in light mode.\ng + labs(title = \"Only shows in light mode\")\n\n\n\n\n\nIf you add #| classes: dark-mode to the chunk, this chunk output will only show in dark mode.\ng + labs(title = \"Only shows in dark mode\")"
  },
  {
    "objectID": "quartoExtra.html#tables",
    "href": "quartoExtra.html#tables",
    "title": "quartoExtra",
    "section": "Tables",
    "text": "Tables\nSet the “quartoExtra.df_print” option to render tables using kable or as paged tables.\n\ntbl <- data.frame(\n  number = 1:26,\n  letter = LETTERS[1:26]\n)\n\n\n# default printing\ntbl\n\n   number letter\n1       1      A\n2       2      B\n3       3      C\n4       4      D\n5       5      E\n6       6      F\n7       7      G\n8       8      H\n9       9      I\n10     10      J\n11     11      K\n12     12      L\n13     13      M\n14     14      N\n15     15      O\n16     16      P\n17     17      Q\n18     18      R\n19     19      S\n20     20      T\n21     21      U\n22     22      V\n23     23      W\n24     24      X\n25     25      Y\n26     26      Z\n\n\n\nPaged\n\noptions(quartoExtra.df_print = \"paged\")\n\n\n# print as paged\ntbl\n\n\n  \n\n\n\n\n\nKable\n\noptions(quartoExtra.df_print = \"kable\")\n\n\n# print as kable\ntbl\n\n\n\n\nnumber\nletter\n\n\n\n\n1\nA\n\n\n2\nB\n\n\n3\nC\n\n\n4\nD\n\n\n5\nE\n\n\n6\nF\n\n\n7\nG\n\n\n8\nH\n\n\n9\nI\n\n\n10\nJ\n\n\n11\nK\n\n\n12\nL\n\n\n13\nM\n\n\n14\nN\n\n\n15\nO\n\n\n16\nP\n\n\n17\nQ\n\n\n18\nR\n\n\n19\nS\n\n\n20\nT\n\n\n21\nU\n\n\n22\nV\n\n\n23\nW\n\n\n24\nX\n\n\n25\nY\n\n\n26\nZ"
  },
  {
    "objectID": "table.html#code",
    "href": "table.html#code",
    "title": "Table printing demo",
    "section": "Code",
    "text": "Code\nThese functions should override knitr::knit_print() for data frames, but wasn’t working at all until I learned in the knit_print vignette that you have to use registerS3method().\n\ndf_print: paged\n\nlibrary(knitr)\n# print everything as paged ----\nknit_print.data.frame <- function (x, options, ...) {\n  rmarkdown::paged_table(x, options) |>\n    rmarkdown:::print.paged_df()\n}\nregisterS3method(\"knit_print\", \"data.frame\", knit_print.data.frame)\n\n\ndata.frame(x = rnorm(5), y = LETTERS[1:5])\n\n\n  \n\n\n\n\n\ndf_print: kable\n\nlibrary(knitr)\n# print everything as kable ----\nknit_print.data.frame <- function (x, options, ...) {\n  knitr::kable(x) |> knitr::knit_print(options, ...)\n}\nregisterS3method(\"knit_print\", \"data.frame\", knit_print.data.frame)\n\n\ndata.frame(x = rnorm(5), y = LETTERS[1:5])\n\n\n\n\nx\ny\n\n\n\n\n1.8982859\nA\n\n\n-2.4844843\nB\n\n\n-0.2045966\nC\n\n\n-0.5541937\nD\n\n\n-0.6123521\nE\n\n\n\n\n\n\n\ndf_print: custom\nPrints tables with 10 or fewer rows using kableExtra::kable() and longer tables with DT::datatable() (unless overridden by options). Includes chunk options for:\n\ndigits (defaults to getOption(\"digits\"))\nrownames (defaults to FALSE)\npageLength (defaults to 10)\nescape (defaults to TRUE)\ntable.cap\n\n\nlibrary(knitr)\n\n# useful function for options\n`%||%` <- function(l, r) {\n  if (is.null(l)) r else l\n}\n\n# super-customised table printing ----\nknit_print.data.frame <- function (x, options, ...) {\n  # get options\n  digits <- options$digits %||% getOption(\"digits\")\n  rownames <- options$rownames %||% FALSE\n  pageLength <- options$pageLength %||% 10 \n  escape <- options$escape %||% TRUE\n  caption <- options$table.cap \n  \n  # use DT for longer tables in html\n  if (nrow(x) > pageLength & knitr::is_html_output()) {\n    numeric_cols <- sapply(x, is.numeric) |> which() |> names()\n    dt <- DT::datatable(x, \n                        rownames = rownames,\n                        caption = caption,\n                        escape = escape,\n                        width = \"100%\",\n                        height = \"auto\",\n                        options = list(pageLength = pageLength),\n                        selection = \"none\")\n    if (length(numeric_cols) > 0) {\n      dt <- DT::formatRound(dt, \n                            columns = numeric_cols,\n                            digits = digits)\n    }\n    knitr::knit_print(dt, options)\n  } else {\n    # use kableExtra::kable for PDFs or shorter tables\n    k <- kableExtra::kable(x, \n                      digits = digits, \n                      row.names = rownames, \n                      caption = caption,\n                      escape = escape) |>\n      kableExtra::kable_styling(\n        full_width = options$full_width,\n        bootstrap_options = c(\"striped\", \"hover\")\n      )\n    \n    if (knitr::is_html_output()) {\n        k <- c(\"<div class=\\\"kable-table\\\">\", k, \"</div>\") |>\n          paste(collapse = \"\\n\")\n    }\n    \n    knitr::asis_output(k)\n  }\n}\nregisterS3method(\"knit_print\", \"data.frame\", knit_print.data.frame)"
  },
  {
    "objectID": "table.html#test-custom-df_print",
    "href": "table.html#test-custom-df_print",
    "title": "Table printing demo",
    "section": "Test custom df_print",
    "text": "Test custom df_print\nMake data.frame and tbl_df object with 5 and 26 rows.\n\ndf5 <- data.frame(x = rnorm(5), y = LETTERS[1:5])\ndf26 <- data.frame(x = rnorm(26), y = LETTERS)\ntbl5 <- tibble::tibble(x = rnorm(5), y = LETTERS[1:5])\ntbl26 <- tibble::tibble(x = rnorm(26), y = LETTERS)\n\n\nData frame - 5 rowsData frame - 26 rowsTibble - 5 rowsTibble - 26 rows\n\n\nShould be displayed with kableExtra::kable().\n\ndf5\n\n\n\n \n  \n    x \n    y \n  \n \n\n  \n    -0.3623860 \n    A \n  \n  \n    -1.3953141 \n    B \n  \n  \n    0.9747057 \n    C \n  \n  \n    -2.1421952 \n    D \n  \n  \n    0.3773984 \n    E \n  \n\n\n\n\n\n\n\nShould be displayed with DT::datatable().\n\ndf26\n\n\n\n\n\n\n\nShould be displayed with kableExtra::kable()\n\ntbl5\n\n\n\n \n  \n    x \n    y \n  \n \n\n  \n    -0.3191969 \n    A \n  \n  \n    -0.2451215 \n    B \n  \n  \n    0.1704627 \n    C \n  \n  \n    0.1091674 \n    D \n  \n  \n    0.4142323 \n    E \n  \n\n\n\n\n\n\n\nShould be displayed with DT::datatable()\n\ntbl26"
  },
  {
    "objectID": "table.html#option-tests",
    "href": "table.html#option-tests",
    "title": "Table printing demo",
    "section": "Option Tests",
    "text": "Option Tests\nTesting options in the r chunk header.\n\ndigitsrownamestable.cappageLengthescapefull_width\n\n\nSet the number of digits to display in numeric columns. Defaults to getOption(\"digits\").\n\n# digits = 3\ntbl5\n\n\n\n \n  \n    x \n    y \n  \n \n\n  \n    -0.319 \n    A \n  \n  \n    -0.245 \n    B \n  \n  \n    0.170 \n    C \n  \n  \n    0.109 \n    D \n  \n  \n    0.414 \n    E \n  \n\n\n\n\n\n\n# digits = 4\ntbl26\n\n\n\n\n\n\n\nrownames are FALSE by default\n\n# rownames = TRUE\ntbl5\n\n\n\n \n  \n      \n    x \n    y \n  \n \n\n  \n    1 \n    -0.3191969 \n    A \n  \n  \n    2 \n    -0.2451215 \n    B \n  \n  \n    3 \n    0.1704627 \n    C \n  \n  \n    4 \n    0.1091674 \n    D \n  \n  \n    5 \n    0.4142323 \n    E \n  \n\n\n\n\n\n\n# rownames = TRUE\ntbl26\n\n\n\n\n\n\n\nTable captions.\n\ntbl5\n\n\n\nThis is my table caption for a tibble with 5 rows\n \n  \n    x \n    y \n  \n \n\n  \n    -0.3191969 \n    A \n  \n  \n    -0.2451215 \n    B \n  \n  \n    0.1704627 \n    C \n  \n  \n    0.1091674 \n    D \n  \n  \n    0.4142323 \n    E \n  \n\n\n\n\n\n\ntbl26\n\n\n\n\n\n\n\nSet the page length for DT, if the table is <= to that, will display as kable.\n\n# pageLength = 3, so should be a DT\ntbl5\n\n\n\n\n\n\n# pageLength = 30, so should be a kable\ntbl26\n\n\n\n \n  \n    x \n    y \n  \n \n\n  \n    0.7707545 \n    A \n  \n  \n    -2.1371483 \n    B \n  \n  \n    0.5033525 \n    C \n  \n  \n    0.9956299 \n    D \n  \n  \n    0.7267368 \n    E \n  \n  \n    -0.4551552 \n    F \n  \n  \n    1.8796271 \n    G \n  \n  \n    0.0236980 \n    H \n  \n  \n    0.7154669 \n    I \n  \n  \n    -0.0442614 \n    J \n  \n  \n    -1.6803580 \n    K \n  \n  \n    0.1612569 \n    L \n  \n  \n    -1.2985660 \n    M \n  \n  \n    -0.0482235 \n    N \n  \n  \n    -0.5887980 \n    O \n  \n  \n    0.0270995 \n    P \n  \n  \n    0.4699772 \n    Q \n  \n  \n    -0.3860046 \n    R \n  \n  \n    -0.3082763 \n    S \n  \n  \n    0.4381090 \n    T \n  \n  \n    -1.6250960 \n    U \n  \n  \n    3.2448865 \n    V \n  \n  \n    1.3718791 \n    W \n  \n  \n    0.7660882 \n    X \n  \n  \n    0.5921580 \n    Y \n  \n  \n    -0.0284404 \n    Z \n  \n\n\n\n\n\n\n\nescape is TRUE by default. Set to FALSE to use html or latex in tables.\n\n# escape = FALSE\ntibble::tibble(styles = c(\"<i>italics</i>\", \"<b>bold</b>\"))\n\n\n\n \n  \n    styles \n  \n \n\n  \n    italics \n  \n  \n    bold \n  \n\n\n\n\n\n\n# escape = FALSE\ntibble::tibble(styles = rep(c(\"<i>italics</i>\", \"<b>bold</b>\"), 10))\n\n\n\n\n\n\n\nFor kable only, defaults to TRUE for html and FALSE for pdf.\n\n# full_width = TRUE\ntbl5\n\n\n\n \n  \n    x \n    y \n  \n \n\n  \n    -0.3191969 \n    A \n  \n  \n    -0.2451215 \n    B \n  \n  \n    0.1704627 \n    C \n  \n  \n    0.1091674 \n    D \n  \n  \n    0.4142323 \n    E \n  \n\n\n\n\n\n\n# full_width = FALSE\ntbl5\n\n\n\n \n  \n    x \n    y \n  \n \n\n  \n    -0.3191969 \n    A \n  \n  \n    -0.2451215 \n    B \n  \n  \n    0.1704627 \n    C \n  \n  \n    0.1091674 \n    D \n  \n  \n    0.4142323 \n    E"
  }
]