# Dark Mode

```{r, include = FALSE}
library(ggplot2)
library(ggthemes)
knitr::opts_chunk$set(
  gif.width = 8,
  fig.height = 3.5,
  out.width = "100%"
)
```

## Demo

Toggle dark and light mode (there's a switch in the upper right corner) to see the plot switch. Inspired by [Marc-Aurèle Rivière](https://twitter.com/mariviere1/status/1521534422826237955).


```{r light-demo, echo = FALSE}
#| classes: light-mode
g <- ggplot(diamonds, aes(x = cut, y = price, fill = cut)) +
  geom_violin() +
  labs(title = "Diamond price by cut")

g + labs(subtitle = "Light Mode") + theme_solarized(light = TRUE)
```

```{r dark-demo, echo = FALSE}
#| classes: dark-mode
g + labs(subtitle = "Dark Mode") + theme_solarized(light = FALSE)
```


## Setup

Edit the _quarto.yml file to add your light and dark themes, plus .scss files for each. The quarto documentation on [HTML Theming](https://quarto.org/docs/output-formats/html-themes.html) is a useful reference.

_quarto.yml:

```yml
format:
  html:
    theme:
      light: [flatly, light.scss]
      dark: [darkly, dark.scss]
```

Create .scss files for light and dark mode. Set blocks with the class .light-mode to hide in dark mode, and blocks with the class .dark-mode to hide in light mode. You can also add other rules here to change [SASS Variables](https://quarto.org/docs/output-formats/html-themes.html#sass-variables) for the themes. For example, I think the inline code colour is too dark in the darkly theme, and I hate the green links.

light.scss:

```css
/*-- scss:defaults --*/
$link-color: #248CFC;

/*-- scss:rules --*/
.light-mode { display: block; }
.dark-mode { display: none; }
```

dark.scss:

```css
/*-- scss:defaults --*/
$link-color: #248CFC;
$code-color: #bb8acf;

/*-- scss:rules --*/
.dark-mode { display: block; }
.light-mode { display: none; }
```

## Switching

Now you can make your plots as normal.

```{r}
g <- ggplot(diamonds, aes(x = cut, y = price, fill = cut)) +
  geom_violin() +
  labs(title = "Diamond price by cut")
```

Add `#| classes: light-mode` or `#| classes: dark-mode` to the code chunks to display their output conditionally.

```{r light-demo2}
#| classes: light-mode

g + labs(subtitle = "Light Mode") + 
  theme_solarized(light = TRUE)
```


```{r dark-demo2}
#| classes: dark-mode

g + labs(subtitle = "Dark Mode") + 
  theme_solarized(light = FALSE)
```


This also works for any content. Just put it inside of a div with the appropriate class.

```markdown
::: {.light-mode}
Text that only shows in light mode
:::

::: {.dark-mode}
Text that only shows in dark mode
:::
```

::: {.light-mode}
Text that only shows in light mode
:::

::: {.dark-mode}
Text that only shows in dark mode
:::

## Auto-theme

If you add the following code at the top of your script, it will automatically theme plots for you without the code above (you still need the setup). I'm using `ggthemes::theme_solarized()` in light and dark versions, but you can add any theme you like or a custom theme.

```{r}
library(knitr)
knit_print.ggplot <- function (x, options, ...) {
  orig_theme <- ggplot2::theme_get()
  on.exit(ggplot2::theme_set(orig_theme))
  
  cat('\n<div class="dark-mode">\n')
  ggplot2::theme_set(ggthemes::theme_solarized(light = FALSE))
  ggplot2:::print.ggplot(x)
  cat('</div>\n')
  cat('<div class="light-mode">\n')
  ggplot2::theme_set(ggthemes::theme_solarized(light = TRUE))
  ggplot2:::print.ggplot(x)
  cat('</div>\n\n')
}
registerS3method("knit_print", "ggplot", knit_print.ggplot)
```

This only works if you set `results='asis'` in the code chunk for the plot. I'll see if I can fix this. 

```{r toggle-demo, results='asis'}
g
```

This doesn't work if you add a complete theme to a plot.

```{r toggle-theme-set, results='asis'}
g + theme_minimal()
```

However, it will work if you just add theme elements with `theme()`.

```{r toggle-theme, results='asis'}
g + theme(plot.title = element_text(color = "red"))
```